#!/usr/bin/env node

/**
 * üé¨ TEST DE CORRECCI√ìN DE VIDEOS EN M√ìVIL - 2025
 * 
 * Script para verificar que la correcci√≥n de videos funciona correctamente
 * en p√°ginas de detalle de proyectos, especialmente en m√≥vil.
 */

const fs = require('fs')
const path = require('path')

// üéØ CONFIGURACI√ìN
const CONFIG = {
  projectsPath: './content/projects/',
  componentPath: './src/components/optimized-video-performance.tsx',
  testResults: []
}

console.log('üé¨ Iniciando test de correcci√≥n de videos en m√≥vil...\n')

// üìÅ Funci√≥n para verificar archivos de video en proyectos
function testVideoFiles() {
  console.log('üìÅ Verificando archivos de video en proyectos...')
  
  try {
    const projectDirs = fs.readdirSync(CONFIG.projectsPath, { withFileTypes: true })
      .filter(dirent => dirent.isDirectory())
      .map(dirent => dirent.name)
    
    let totalVideos = 0
    const videosByFormat = { webm: 0, mp4: 0, mov: 0, otros: 0 }
    
    projectDirs.forEach(projectDir => {
      const projectPath = path.join(CONFIG.projectsPath, projectDir)
      const files = fs.readdirSync(projectPath)
      
      const videoFiles = files.filter(file => 
        /\.(webm|mp4|mov|avi)$/i.test(file)
      )
      
      if (videoFiles.length > 0) {
        console.log(`   üìÅ ${projectDir}: ${videoFiles.length} video(s)`)
        videoFiles.forEach(video => {
          totalVideos++
          const ext = path.extname(video).toLowerCase().substring(1)
          if (videosByFormat[ext]) {
            videosByFormat[ext]++
          } else {
            videosByFormat.otros++
          }
          console.log(`      üé• ${video}`)
        })
      }
    })
    
    console.log(`\nüìä Resumen de videos encontrados:`)
    console.log(`   üìù Total de videos: ${totalVideos}`)
    console.log(`   üìä Por formato:`)
    console.log(`      üé¨ WEBM: ${videosByFormat.webm}`)
    console.log(`      üé¨ MP4: ${videosByFormat.mp4}`)
    console.log(`      üé¨ MOV: ${videosByFormat.mov}`)
    console.log(`      üé¨ Otros: ${videosByFormat.otros}`)
    
    CONFIG.testResults.push({
      test: 'Video Files Detection',
      status: totalVideos > 0 ? 'PASS' : 'FAIL',
      details: `${totalVideos} videos encontrados`
    })
    
  } catch (error) {
    console.error('‚ùå Error verificando archivos de video:', error.message)
    CONFIG.testResults.push({
      test: 'Video Files Detection',
      status: 'ERROR',
      details: error.message
    })
  }
}

// üîß Funci√≥n para verificar la correcci√≥n en OptimizedVideoPerformance
function testVideoComponentFix() {
  console.log('\nüîß Verificando correcci√≥n en OptimizedVideoPerformance...')
  
  try {
    const componentContent = fs.readFileSync(CONFIG.componentPath, 'utf8')
    
    // Tests espec√≠ficos
    const tests = [
      {
        name: 'Detecci√≥n autom√°tica de formato',
        pattern: /getVideoFormat.*src.*string.*type.*extension/s,
        description: 'Funci√≥n para detectar formato de video autom√°ticamente'
      },
      {
        name: 'Timeout m√≥vil extendido',
        pattern: /isMobile.*window\.innerWidth.*768.*timeoutDuration.*5000.*3000/s,
        description: 'Timeout extendido para dispositivos m√≥vil'
      },
      {
        name: 'Source √∫nica con formato correcto',
        pattern: /<source src=\{src\} type=\{videoFormat\.type\}/,
        description: 'Una sola source con formato detectado autom√°ticamente'
      },
      {
        name: 'Error logging mejorado',
        pattern: /console\.error.*Video format detected.*videoFormat\.type/s,
        description: 'Logging de errores con informaci√≥n del formato'
      },
      {
        name: 'Eliminaci√≥n de sources duplicadas',
        pattern: /video\/webm.*video\/mp4/s,
        shouldNotMatch: true,
        description: 'No debe haber sources duplicadas con formatos incorrectos'
      }
    ]
    
    tests.forEach(test => {
      const matches = componentContent.match(test.pattern)
      const passed = test.shouldNotMatch ? !matches : !!matches
      
      console.log(`   ${passed ? '‚úÖ' : '‚ùå'} ${test.name}`)
      console.log(`      üìù ${test.description}`)
      
      CONFIG.testResults.push({
        test: test.name,
        status: passed ? 'PASS' : 'FAIL',
        details: test.description
      })
    })
    
  } catch (error) {
    console.error('‚ùå Error verificando componente:', error.message)
    CONFIG.testResults.push({
      test: 'Component Fix Verification',
      status: 'ERROR',
      details: error.message
    })
  }
}

// üì± Funci√≥n para verificar compatibilidad m√≥vil
function testMobileCompatibility() {
  console.log('\nüì± Verificando mejoras de compatibilidad m√≥vil...')
  
  try {
    const componentContent = fs.readFileSync(CONFIG.componentPath, 'utf8')
    
    // Verificar caracter√≠sticas m√≥vil-espec√≠ficas
    const mobileFeatures = [
      {
        name: 'playsInline para iOS',
        pattern: /playsInline.*true/,
        description: 'Atributo playsInline configurado correctamente'
      },
      {
        name: 'Muted por defecto',
        pattern: /muted=\{muted\}/,
        description: 'Videos silenciados por defecto (requerido para autoplay m√≥vil)'
      },
      {
        name: 'Preload optimizado',
        pattern: /preload="auto"/,
        description: 'Estrategia de preload configurada'
      }
    ]
    
    mobileFeatures.forEach(feature => {
      const matches = componentContent.match(feature.pattern)
      console.log(`   ${matches ? '‚úÖ' : '‚ùå'} ${feature.name}`)
      console.log(`      üìù ${feature.description}`)
      
      CONFIG.testResults.push({
        test: `Mobile: ${feature.name}`,
        status: matches ? 'PASS' : 'FAIL',
        details: feature.description
      })
    })
    
  } catch (error) {
    console.error('‚ùå Error verificando compatibilidad m√≥vil:', error.message)
  }
}

// üìä Funci√≥n para mostrar resumen final
function showSummary() {
  console.log('\n' + '='.repeat(60))
  console.log('üìä RESUMEN DE CORRECCI√ìN DE VIDEOS EN M√ìVIL')
  console.log('='.repeat(60))
  
  const passedTests = CONFIG.testResults.filter(test => test.status === 'PASS').length
  const failedTests = CONFIG.testResults.filter(test => test.status === 'FAIL').length
  const errorTests = CONFIG.testResults.filter(test => test.status === 'ERROR').length
  
  console.log(`\nüéØ Tests ejecutados: ${CONFIG.testResults.length}`)
  console.log(`‚úÖ Exitosos: ${passedTests}`)
  console.log(`‚ùå Fallidos: ${failedTests}`)
  console.log(`‚ö†Ô∏è  Errores: ${errorTests}`)
  console.log(`üìà Tasa de √©xito: ${((passedTests / CONFIG.testResults.length) * 100).toFixed(1)}%`)
  
  const overallStatus = failedTests === 0 && errorTests === 0 ? 'EXITOSO' : 'REQUIERE ATENCI√ìN'
  console.log(`\nüü¢ ESTADO GENERAL: ${overallStatus}`)
  
  if (overallStatus === 'EXITOSO') {
    console.log('\nüéâ CORRECCI√ìN DE VIDEOS EN M√ìVIL IMPLEMENTADA CORRECTAMENTE')
    console.log('\nüí° MEJORAS APLICADAS:')
    console.log('   ‚Ä¢ Detecci√≥n autom√°tica de formato de video')
    console.log('   ‚Ä¢ Timeout extendido para conexiones m√≥vil lentas')
    console.log('   ‚Ä¢ Source √∫nica con tipo MIME correcto')
    console.log('   ‚Ä¢ Mejor logging de errores')
    console.log('   ‚Ä¢ Fallback optimizado para fallos de carga')
  } else {
    console.log('\n‚ö†Ô∏è PROBLEMAS DETECTADOS - REVISAR IMPLEMENTACI√ìN')
  }
  
  console.log('\nüîó URLs de prueba:')
  console.log('   ‚Ä¢ http://localhost:8000/trabajos/agora (video webm)')
  console.log('   ‚Ä¢ http://localhost:8000/trabajos/prats (video mp4)')
  console.log('   ‚Ä¢ http://localhost:8000/trabajos/ipb (video mp4)')
}

// üöÄ Ejecutar todos los tests
function runAllTests() {
  testVideoFiles()
  testVideoComponentFix()
  testMobileCompatibility()
  showSummary()
}

// Ejecutar si es llamado directamente
if (require.main === module) {
  runAllTests()
}

module.exports = {
  runAllTests,
  testVideoFiles,
  testVideoComponentFix,
  testMobileCompatibility
} 